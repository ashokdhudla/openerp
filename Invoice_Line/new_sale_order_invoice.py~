from openerp.osv import fields, osv
from openerp.tools.float_utils import float_round
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta
import time
from openerp import pooler
from openerp.tools.translate import _
from openerp.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT, DATETIME_FORMATS_MAP, float_compare
import openerp.addons.decimal_precision as dp
from openerp import netsvc

class sale_order_invoice(osv.osv):
	_inherit = "account.invoice"
	
	def _amount_line_tax(self, cr, uid, line, context=None):
		val = {'vat':0.0,'service':0.0}
		tax_obj = self.pool.get('account.tax')
		if line.cst_vat_tax:
			tax = tax_obj.search(cr,uid,[('name','=',line.cst_vat_tax)])
			tax_object = tax_obj.browse(cr,uid,tax)
			for c in tax_obj.compute_all(cr, uid, tax_object,line.price_unit * (1-(line.discount or 0.0)/100.0), line.quantity, line.product_id, line.order_id.partner_id)['taxes']:
				val['vat'] += c.get('amount', 0.0)
				print val['vat']
		if line.service_tax:
			tax = tax_obj.search(cr,uid,[('name','=',line.service_tax)])
			tax_object = tax_obj.browse(cr,uid,tax)
			for c in tax_obj.compute_all(cr, uid, tax_object,line.price_unit * (1-(line.discount or 0.0)/100.0), line.quantity, line.product_id, line.order_id.partner_id)['taxes']:
				val['service'] += c.get('amount', 0.0)
				print val['service']
		if line.cst_vat_tax == False and line.service_tax == False :
			print val
			return val
		#else:
			#for c in tax_obj.compute_all(cr, uid, line.tax_id,line.price_unit * (1-(line.discount or 0.0)/100.0), line.quantity, line.product_id, line.order_id.partner_id)['taxes']:
				#val += c.get('amount', 0.0)
		print val
		return val

	def _amount_all_new(self, cr, uid, ids, field_name, arg, context=None):
		cur_obj = self.pool.get('res.currency')
		tax_obj = self.pool.get('account.tax')
		res = {}
		
		for order in self.browse(cr, uid, ids, context=context):
			res[order.id] = {
				'amount_untaxed': 0.0,
				'amount_vat_cst_tax': 0.0,
				'amount_service_tax': 0.0,
				'amount_total': 0.0,
				'discount_new':0.0,
				'order_total_price':0.0,
			}
			
			val = val2 = val3 = val4 = val5 = 0.0
			print val,val5
			for line in order.invoice_line:
				val4 += line.price_subtotal
				val3 += line.price_amount
				val2 += line.price_unit * line.quantity
				cur = line.invoice_id.currency_id
				#val += self._amount_line_tax(cr, uid, line, context=context)
				if line.cst_vat_tax:
					if line.cst_vat_tax != False:
						#tax = tax_obj.search(cr,uid,[('name','=',line.cst_vat_tax)])
						#tax_object = tax_obj.browse(cr,uid,line.cst_vat_tax)
						for c in tax_obj.compute_all(cr, uid,[line.cst_vat_tax],line.price_unit * (1-(line.discount or 0.0)/100.0), line.quantity, line.product_id, line.invoice_id.partner_id)['taxes']:
							val += c.get('amount', 0.0)
						res[order.id]['amount_vat_cst_tax'] = cur_obj.round(cr, uid, cur, val)
					print ('Vat/Cst Tax'),res[order.id]['amount_vat_cst_tax']
				if line.service_tax:
					if line.service_tax != False:
						#tax_object = tax_obj.browse(cr,uid,line.service_tax)
						for c in tax_obj.compute_all(cr, uid,[line.service_tax],line.price_unit * (1-(line.discount or 0.0)/100.0), line.quantity, line.product_id, line.invoice_id.partner_id)['taxes']:
							val5 += c.get('amount', 0.0)
						res[order.id]['amount_service_tax'] = cur_obj.round(cr, uid, cur, val5)
					print ('Service Tax'),res[order.id]['amount_service_tax']
				if line.cst_vat_tax == False and line.service_tax == False :
					res[order.id]['amount_vat_cst_tax'] = cur_obj.round(cr, uid, cur, val) 
					res[order.id]['amount_service_tax'] = cur_obj.round(cr, uid, cur, val5)
			res[order.id]['amount_untaxed']= cur_obj.round(cr, uid, cur, val2)
			res[order.id]['amount_total'] = cur_obj.round(cr, uid, cur, val3)
			res[order.id]['order_total_price'] = cur_obj.round(cr, uid, cur, val4)
			res[order.id]['discount_new'] = ((res[order.id]['amount_untaxed']-res[order.id]['order_total_price'])/res[order.id]['amount_untaxed'])*100
		return res
	def _get_invoice_line(self, cr, uid, ids, context=None):
		result = {}
		for line in self.pool.get('account.invoice.line').browse(cr, uid, ids, context=context):
			result[line.invoice_id.id] = True
		return result.keys()

	def _get_invoice_tax(self, cr, uid, ids, context=None):
		result = {}
		for tax in self.pool.get('account.invoice.tax').browse(cr, uid, ids, context=context):
			result[tax.invoice_id.id] = True
		return result.keys()

	_columns = {
		'contact_person':fields.many2one('res.partner','Contact Person',select=True),
		'amount_untaxed': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='Subtotal',
			store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
		'amount_vat_cst_tax': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='VAT Total',
			store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
		'amount_service_tax': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='Service Tax Total',
			store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
		'amount_total': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='Grand Total',
			store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
		    	multi='sums', help="The total amount."),
		'discount_new': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='Discount',
            		store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
		'order_total_price': fields.function(_amount_all_new, digits_compute=dp.get_precision('Account'), string='Total Price',
            		store={
                'account.invoice': (lambda self, cr, uid, ids, c={}: ids, ['invoice_line'], 20),
                'account.invoice.tax': (_get_invoice_tax, None, 20),
                'account.invoice.line': (_get_invoice_line, ['price_unit','cst_vat_tax','service_tax','quantity','discount','invoice_id'], 20),
            },
            multi='all'),
			
	}
	
	
	def onchange_partner_id(self, cr, uid, ids, type, partner_id,\
            date_invoice=False, payment_term=False, partner_bank_id=False, company_id=False):
		partner_payment_term = False
		acc_id = False
		bank_id = False
		fiscal_position = False
		warn_msg=''
		opt = [('uid', str(uid))]
		if partner_id:

			opt.insert(0, ('id', partner_id))
			p = self.pool.get('res.partner').browse(cr, uid, partner_id)
			if company_id:
				if (p.property_account_receivable.company_id and (p.property_account_receivable.company_id.id != company_id)) and (p.property_account_payable.company_id and (p.property_account_payable.company_id.id != company_id)):
					property_obj = self.pool.get('ir.property')
					rec_pro_id = property_obj.search(cr,uid,[('name','=','property_account_receivable'),('res_id','=','res.partner,'+str(partner_id)+''),('company_id','=',company_id)])
					pay_pro_id = property_obj.search(cr,uid,[('name','=','property_account_payable'),('res_id','=','res.partner,'+str(partner_id)+''),('company_id','=',company_id)])
					if not rec_pro_id:
						rec_pro_id = property_obj.search(cr,uid,[('name','=','property_account_receivable'),('company_id','=',company_id)])
					if not pay_pro_id:
						pay_pro_id = property_obj.search(cr,uid,[('name','=','property_account_payable'),('company_id','=',company_id)])
					rec_line_data = property_obj.read(cr,uid,rec_pro_id,['name','value_reference','res_id'])
					pay_line_data = property_obj.read(cr,uid,pay_pro_id,['name','value_reference','res_id'])
					rec_res_id = rec_line_data and rec_line_data[0].get('value_reference',False) and int(rec_line_data[0]['value_reference'].split(',')[1]) or False
					pay_res_id = pay_line_data and pay_line_data[0].get('value_reference',False) and int(pay_line_data[0]['value_reference'].split(',')[1]) or False
					if not rec_res_id and not pay_res_id:
						raise osv.except_osv(_('Configuration Error!'),
							_('Cannot find a chart of accounts for this company, you should create one.'))
					account_obj = self.pool.get('account.account')
					rec_obj_acc = account_obj.browse(cr, uid, [rec_res_id])
					pay_obj_acc = account_obj.browse(cr, uid, [pay_res_id])
					p.property_account_receivable = rec_obj_acc[0]
					p.property_account_payable = pay_obj_acc[0]

			if type in ('out_invoice', 'out_refund'):
				acc_id = p.property_account_receivable.id
				partner_payment_term = p.property_payment_term and p.property_payment_term.id or False
			else:
				acc_id = p.property_account_payable.id
				partner_payment_term = p.property_supplier_payment_term and p.property_supplier_payment_term.id or False
			fiscal_position = p.property_account_position and p.property_account_position.id or False
			if p.bank_ids:
				bank_id = p.bank_ids[0].id

		result = {'value': {
			'account_id': acc_id,
			'payment_term': partner_payment_term,
			'fiscal_position': fiscal_position
			}
		}
		if type in ('in_invoice', 'in_refund'):
			result['value']['partner_bank_id'] = bank_id

		if payment_term != partner_payment_term:
			if partner_payment_term:
				to_update = self.onchange_payment_term_date_invoice(
					cr, uid, ids, partner_payment_term, date_invoice)
				result['value'].update(to_update['value'])
			else:
				result['value']['date_due'] = False

		if partner_bank_id != bank_id:
			to_update = self.onchange_partner_bank(cr, uid, ids, bank_id)
			result['value'].update(to_update['value'])
		if not partner_id:
			result.update({'value': {'partner_invoice_id': False, 'partner_shipping_id': False,  'payment_term': False, 'fiscal_position': False,'contact_person':False}})

		part = self.pool.get('res.partner').browse(cr, uid, partner_id, context=None)
		addr = self.pool.get('res.partner').address_get(cr, uid, [part.id], ['delivery', 'invoice', 'contact'])
		pricelist = part.property_product_pricelist and part.property_product_pricelist.id or False
		payment_term = part.property_payment_term and part.property_payment_term.id or False
		fiscal_position = part.property_account_position and part.property_account_position.id or False
		dedicated_salesman = part.user_id and part.user_id.id or uid
		contact_person_id = self.pool.get('res.partner').search(cr,uid,[('parent_id', '=',part.id)])
		contact_person_name= self.pool.get('res.partner').browse(cr,uid,contact_person_id)
		if contact_person_name:
			val = {
				'partner_invoice_id': addr['invoice'],
				'partner_shipping_id': addr['delivery'],
				'payment_term': payment_term,
				'fiscal_position': fiscal_position,
				'user_id': dedicated_salesman,
				'contact_person':contact_person_name[0].id,
				}
		else:
			raise osv.except_osv(_('No Contact Person Defined!'),_("You must first create a contact person for this customer") )
		if pricelist:
			val['pricelist_id'] = pricelist
		result.update({'value': val})
		return result
		
sale_order_invoice()

class invoice_line_new(osv.osv):
	_inherit='account.invoice.line'
	def _amount_line_new(self, cr, uid, ids, field_name, arg, context=None):
		tax_obj = self.pool.get('account.tax')
		cur_obj = self.pool.get('res.currency')
		res = {}
		if context is None:
			context = {}
		for line in self.browse(cr, uid, ids, context=None):
			res[line.id] = {
                		'price_subtotal': 0.0,
                		'price_amount': 0.0,
           			 }
			price = line.price_unit * (1 - (line.discount or 0.0) / 100.0)
			taxes = tax_obj.compute_all(cr, uid, line.invoice_line_tax_id, price, line.quantity, line.product_id, line.invoice_id.partner_id)
			cur = line.invoice_id.currency_id
			res[line.id]['price_subtotal'] = cur_obj.round(cr, uid, cur, taxes['total'])
			total_equal1 = total_equal2 = total_equal3 =  0.0
			val1 = val2 = 0.0
			if line.cst_vat_tax:
				price = res[line.id]['price_subtotal']
				taxes = tax_obj.compute_all(cr, uid,[line.cst_vat_tax], price,line.quantity, line.product_id, line.invoice_id.partner_id)
				val1 = taxes['taxes'][0]['amount']

			if line.service_tax:
				price = res[line.id]['price_subtotal']
				taxes = tax_obj.compute_all(cr, uid,[line.service_tax], price,line.quantity, line.product_id, line.invoice_id.partner_id)
				val2 = taxes['taxes'][0]['amount']
			if  line.cst_vat_tax == False and line.service_tax == False:
				total_equal3 = res[line.id]['price_subtotal']
			if line.installation_price:
				res[line.id]['price_amount'] = cur_obj.round(cr, uid, cur, (res[line.id]['price_subtotal']+ val2 + val1 + line.installation_price))
				
			else:
				res[line.id]['price_amount'] = cur_obj.round(cr, uid, cur, res[line.id]['price_subtotal']+ val2 + val1)
		return res
		
	_columns = {
    	'price_subtotal': fields.function(_amount_line_new, string='Total Price', digits_compute= dp.get_precision('Account'),multi='sums'),
		'price_amount': fields.function(_amount_line_new, string='Total Amount', digits_compute= dp.get_precision('Account'),multi='sums'),
		'cst_vat_tax':fields.many2one('account.tax','CST/VAT'),
		'service_tax':fields.many2one('account.tax','Service Tax'),
		'installation_price':fields.float('Installation Price',help="The Installation Price"),
	}
	
	def product_id_change(self, cr, uid, ids, product, uom_id, qty=0, name='', type='out_invoice', partner_id=False, fposition_id=False, price_unit=False, currency_id=False, context=None, company_id=None):
		if context is None:
			context = {}
		company_id = company_id if company_id != None else context.get('company_id',False)
		context = dict(context)
		context.update({'company_id': company_id, 'force_company': company_id})
		if not partner_id:
			raise osv.except_osv(_('No Partner Defined!'),_("You must first select a partner!") )
		if not product:
			if type in ('in_invoice', 'in_refund'):
				return {'value': {}, 'domain':{'product_uom':[]}}
			else:
				return {'value': {'price_unit': 0.0}, 'domain':{'product_uom':[]}}
		partner_obj = self.pool.get('res.partner')
		part = partner_obj.browse(cr, uid, partner_id, context=context).category_id
		fpos_obj = self.pool.get('account.fiscal.position')
		fpos = fposition_id and fpos_obj.browse(cr, uid, fposition_id, context=context) or False

		if partner_id:
			lang = partner_obj.browse(cr, uid, partner_id).lang
			context.update({'lang': lang})
		result = {}
		res = self.pool.get('product.product').browse(cr, uid, product, context=context)
		tax_obj = self.pool.get('account.tax')
		if res.service_tax.id:
			service_tax_obj = tax_obj.browse(cr, uid, res.service_tax.id,context=context)
			result.update({'service_tax':service_tax_obj.id})
		if res.cst_vat_tax.id:
			vat_tax_obj = tax_obj.browse(cr, uid, res.cst_vat_tax.id,context=context)
			result.update({'cst_vat_tax':vat_tax_obj.id})

		if type in ('out_invoice','out_refund'):
			a = res.property_account_income.id
			if not a:
				a = res.categ_id.property_account_income_categ.id
		else:
			a = res.property_account_expense.id
			if not a:
				a = res.categ_id.property_account_expense_categ.id
		a = fpos_obj.map_account(cr, uid, fpos, a)
		if a:
			result['account_id'] = a

		if type in ('out_invoice', 'out_refund'):
			taxes = res.taxes_id and res.taxes_id or (a and self.pool.get('account.account').browse(cr, uid, a, context=context).tax_ids or False)
		else:
			taxes = res.supplier_taxes_id and res.supplier_taxes_id or (a and self.pool.get('account.account').browse(cr, uid, a, context=context).tax_ids or False)
		tax_id = fpos_obj.map_tax(cr, uid, fpos, taxes)

		if type in ('in_invoice', 'in_refund'):
			if part:
				if part[0].name.lower()=='customer':
					result.update( {'price_unit': res.list_price} )
				elif part[0].name.lower()=='reseller':
					result.update({'price_unit':res.reseller_sale_price})
			else:
				raise osv.except_osv(_('Tag is wrongly configured'),_("You must create a Tag for this customer, Tag must be a Customer or Reseller") )
		else:
			if part:
				if part[0].name.lower()=='customer':
					result.update( {'price_unit': res.list_price} )
				elif part[0].name.lower()=='reseller':
					result.update({'price_unit':res.reseller_sale_price})
			else:
				raise osv.except_osv(_('Tag is wrongly configured'),_("You must create a Tag for this customer, Tag must be a Customer or Reseller") )
		result['name'] = res.partner_ref

		result['uos_id'] = uom_id or res.uom_id.id
		if res.description:
			result['name'] += '\n'+res.description

		domain = {'uos_id':[('category_id','=',res.uom_id.category_id.id)]}

		res_final = {'value':result, 'domain':domain}

		if not company_id or not currency_id:
			return res_final

		company = self.pool.get('res.company').browse(cr, uid, company_id, context=context)
		currency = self.pool.get('res.currency').browse(cr, uid, currency_id, context=context)

		if company.currency_id.id != currency.id:
			if type in ('in_invoice', 'in_refund'):
				res_final['value']['price_unit'] = res.standard_price
			new_price = res_final['value']['price_unit'] * currency.rate
			res_final['value']['price_unit'] = new_price

		if result['uos_id'] and result['uos_id'] != res.uom_id.id:
			selected_uom = self.pool.get('product.uom').browse(cr, uid, result['uos_id'], context=context)
			new_price = self.pool.get('product.uom')._compute_price(cr, uid, res.uom_id.id, res_final['value']['price_unit'], result['uos_id'])
			res_final['value']['price_unit'] = new_price
		return res_final

invoice_line_new()
